"""
Contains the Sample1TestCase class which is a base class for all unit tests relating to
sample_database_1.db.
"""

# mypy: ignore-errors
import os
import shutil
from datetime import datetime
from unittest import TestCase

from src import model
from src.model import UserSettings, database, date_format
from src.model.account import Account
from src.model.amount import Amount
from src.model.location import Location
from src.model.merchant import Merchant
from src.model.sql_object import SqlObject
from src.model.statement import Statement
from src.model.tag import Tag
from src.model.transaction import Transaction
from tests.test_model import sample_database_1_path, test_database_path

EXPECTED_TRANSACTIONS: list[Transaction] = [
    Transaction(
        1,
        "Date with Sara",
        1,
        False,
        datetime.strptime("2020-08-27 21:14:40", date_format),
        None,
        "IMAGE4.jpeg",
        35.868317424041166,
        -78.62154243252625,
        1,
        None,
    ),
    Transaction(
        2,
        "New Macbook",
        4,
        True,
        datetime.strptime("2020-10-09 19:01:21", date_format),
        5,
        "IMAGE8932.png",
        35.840809717971595,
        -78.68013948171635,
        2,
        None,
    ),
    Transaction(
        3,
        "DND Dice",
        9,
        True,
        datetime.strptime("2023-05-04 23:44:29", date_format),
        1,
        "IMAGE22.png",
        None,
        None,
        1,
        None,
    ),
    Transaction(
        4,
        "Things from Amazon",
        3,
        True,
        datetime.strptime("2020-09-28 19:26:10", date_format),
        1,
        None,
        None,
        None,
        1,
        None,
    ),
    Transaction(
        5,
        "Transfer From Savings",
        None,
        False,
        datetime.strptime("2021-02-15 02:32:18", date_format),
        None,
        None,
        None,
        None,
        2,
        6,
    ),
    Transaction(
        6,
        "Transfer Into Checking",
        None,
        False,
        datetime.strptime("2021-02-15 02:33:05", date_format),
        None,
        None,
        None,
        None,
        1,
        5,
    ),
    Transaction(
        7,
        None,
        None,
        False,
        None,
        None,
        None,
        None,
        None,
        1,
        None,
    ),
]

EXPECTED_STATEMENTS: list[Statement] = [
    Statement(
        1,
        datetime.strptime("2019-02-14 00:00:00", date_format),
        "BOA.csv",
        1,
        3235.45,
        True,
    ),
    Statement(
        2,
        datetime.strptime("2020-07-08 00:00:00", date_format),
        "BOA1.csv",
        1,
        66.45,
        True,
    ),
    Statement(
        3,
        datetime.strptime("2023-07-20 00:00:00", date_format),
        "NEWBOA.csv",
        1,
        3825.01,
        False,
    ),
    Statement(4, "2018-12-21 00:00:00", "DISCOVER.csv", 2, 517.01, True),
    Statement(5, "2019-08-25 00:00:00", None, 2, 320.93, True),
    Statement(6, "2021-04-22 00:00:00", "NEWDISCOVER.csv", 2, 500.33, False),
]

EXPECTED_ACCOUNTS: list[Account] = [
    Account(1, "Checking", 2, 3, 7),
    Account(2, "Savings", 3, 1, 5),
]

EXPECTED_MERCHANTS: list[Merchant] = [
    Merchant(1, "Penn Station", False, "pennstation"),
    Merchant(2, "Outback Steak House", False, "outbackhouse"),
    Merchant(3, "Amazon", True, "amazon"),
    Merchant(4, "Apple", False, None),
    Merchant(5, "Port City Java", False, None),
    Merchant(6, "BJS", False, "bjsrewards"),
    Merchant(7, "Dollar General", False, "dollar_general"),
    Merchant(8, "Bambu Labs", True, "bambu"),
    Merchant(9, "Etsy", True, "etsy"),
    Merchant(10, "Food Lion", False),
    Merchant(11, "Poke Burri", False),
    Merchant(12, "Quiznos", False),
    Merchant(13, "Cookout", False),
    Merchant(14, "Wolfpack Outfitters", False),
    Merchant(15, "Starbucks", False),
    Merchant(16, "Bojangles", False),
    Merchant(17, "CSV", False),
    Merchant(18, "Kabobi", False),
    Merchant(19, "Jimmy Johns", False),
    Merchant(20, "Papa Johns", False),
    Merchant(21, "Target", False),
    Merchant(22, "Sheetz", False),
    Merchant(23, "Sake House", False),
    Merchant(24, "The Daily Grind", False),
    Merchant(25, "Hiberian", False),
    Merchant(26, "Burger King", False),
    Merchant(27, "Lake Gaston Pizza", False),
]

EXPECTED_LOCATIONS: list[Location] = [
    Location(1, "Falls of Neuse", 1, 35.86837825457926, -78.62150981593383),
    Location(2, "Capital", 2, 35.85665622223983, -78.58032796673776),
    Location(3, "Crabtree Mall", 4, 35.8408590921226, -78.68011850195218),
    Location(4, "EB2", 5, 35.77184197261896, -78.67356047898443),
    Location(5, "Park Shops", 5, 35.78546665319359, -78.66708463594044),
    Location(6, "Talley", 5, 35.78392567533286, -78.67092696947988),
    Location(7, "Walnut", 6, 35.753166119681715, -78.74569648479638),
    Location(8, "Durant", 7, 35.906477682429525, -78.59029227485301),
    Location(9, "Falls of the Neuse", 10, 35.89337371246719, -78.62682070349958),
    Location(10, "Falls Village", 11, 35.87316059117457, -78.62387896318373),
    Location(11, "Falls Village", 12, 35.87266509701044, -78.62377404808242),
    Location(12, "NCSU location", 1, 35.78961969483434, -78.67744821984563),
    Location(13, "NCSU location", 14, 35.78371200824164, -78.67068259230206),
    Location(14, "Six forks", 17, 35.86444584516455, -78.63808411691662),
    Location(15, "Falls of the neuse", 15, 35.90488523480609, -78.60189635156124),
    Location(16, "Durant", 16, 35.90587402814305, -78.59124502510124),
    Location(17, "NCSU location", 13, 35.78483093184499, -78.69310522708847),
    Location(18, "Crabtree", 18, 35.840705654273584, -78.68139611810646),
    Location(19, "Hope valley commons", 19, 35.91815724307745, -78.96090395401171),
    Location(20, "Strickland", 20, 35.90119175054282, -78.65620646798338),
    Location(21, "Hillsborough", 21, 35.78822882724383, -78.66875186876884),
    Location(22, "Lake gaston", 10, 36.53356305834947, -77.93897122255822),
    Location(23, "Lake gaston", 27, 36.533861832817294, -77.93855413228337),
    Location(24, "Durant", 23, 35.90689391700105, -78.58924633168667),
    Location(25, "Falls of the neuse", 10, 35.893427441044764, -78.62685981286576),
    Location(26, "Falls of the neuse", 25, 35.893861556979274, -78.62447705549985),
    Location(27, "Work", 26, 35.87550745065946, -78.85141266359875),
    Location(28, "Work", 16, 35.87821312322193, -78.85020094835637),
]

EXPECTED_TAGS: list[Tag] = [
    Tag(1, "Groceries", False, "groc"),
    Tag(2, "Gas", False, "gas"),
    Tag(3, "Anarack", True, None),
    Tag(4, "University", False, "uni"),
    Tag(5, "Dating", False, "date"),
    Tag(6, "Third Party Transaction", False, "paid for by parents"),
    Tag(7, "Eating Out", False, "eatout"),
    Tag(8, "Winter Park Trip", True, None),
    Tag(9, "The Maze Trip", True, None),
    Tag(10, "Personal", False, "personal"),
    Tag(11, "Coffee", False, "coffee"),
]

EXPECTED_AMOUNTS: list[Amount] = [
    Amount(1, 20.54, 1, None),
    Amount(2, 1245.34, 2, None),
    Amount(3, 12.98, 3, None),
    Amount(4, 34.82, 4, "PC Parts"),
    Amount(5, 12.63, 4, "Textbook"),
    Amount(6, -100, 5, None),
    Amount(7, 100, 6, None),
]

receipt_date_format: str = "%Y:%m:%d %H:%M:%S"
EXPECTED_IMPORTED_TRANSACTIONS: list[Transaction] = [
    Transaction(
        None,
        "Grocery shopping before going back to state with Sara paid for by parents",
        10,
        False,
        datetime.strptime("2023:09:04 11:49:19", receipt_date_format),
        None,
        "IMG_5795.png",
        35.89315277777778,
        -78.62703611111111,
        None,
        None,
    ),
    Transaction(
        None,
        None,
        12,
        False,
        datetime.strptime("2023:09:13 15:36:20", receipt_date_format),
        None,
        "IMG_5806.png",
        35.87272222222222,
        -78.623825,
        None,
        None,
    ),
    Transaction(
        None,
        "Late night cook out run",
        13,
        False,
        datetime.strptime("2023:09:16 03:33:12", receipt_date_format),
        None,
        "IMG_5814.png",
        35.78483333333333,
        -78.69306944444445,
        None,
        None,
    ),
    Transaction(
        None,
        "Subs for me and Sara",
        1,
        False,
        datetime.strptime("2023:09:19 16:21:41", receipt_date_format),
        None,
        "IMG_5821.png",
        35.7898,
        -78.67783333333334,
        None,
        None,
    ),
    Transaction(
        None,
        "Single page for magic proxies at wolf print",
        14,
        False,
        datetime.strptime("2023:09:22 17:29:15", receipt_date_format),
        None,
        "IMG_5825.png",
        35.78339722222222,
        -78.67076944444445,
        None,
        None,
    ),
    Transaction(
        None,
        "Coffee on the way for the beach trip",
        None,
        False,
        datetime.strptime("2023:10:10 11:16:05", receipt_date_format),
        None,
        "IMG_5861.png",
        34.99378333333333,
        -78.1388388888889,
        None,
        None,
    ),
    Transaction(
        None,
        "Dinner on the way back from the beach trip",
        None,
        False,
        datetime.strptime("2023:10:10 18:59:43", receipt_date_format),
        None,
        "IMG_5862.png",
        34.56046944444444,
        -77.91750277777778,
        None,
        None,
    ),
    Transaction(
        None,
        "First Magic Deck",
        14,
        False,
        datetime.strptime("2023:10:15 15:46:08", receipt_date_format),
        None,
        "IMG_5865.png",
        35.783427777777774,
        -78.67078333333333,
        None,
        None,
    ),
    Transaction(
        None,
        "Extra Magic Cards",
        14,
        False,
        datetime.strptime("2023:10:20 16:54:17", receipt_date_format),
        None,
        "IMG_5869.png",
        35.78339444444444,
        -78.67076944444445,
        None,
        None,
    ),
    Transaction(
        None,
        "Wolf print magic cards",
        14,
        False,
        datetime.strptime("2023:11:05 12:37:50", receipt_date_format),
        None,
        "IMG_5884.png",
        35.78341666666667,
        -78.670775,
        None,
        None,
    ),
    Transaction(
        None,
        None,
        17,
        False,
        datetime.strptime("2023:11:26 13:16:14", receipt_date_format),
        None,
        "IMG_5932.png",
        35.864669444444445,
        -78.63806111111111,
        None,
        None,
    ),
    Transaction(
        None,
        "Port City Java",
        5,
        False,
        datetime.strptime("2023:12:11 14:26:19", receipt_date_format),
        None,
        "IMG_5936.png",
        35.78404166666667,
        -78.67079166666667,
        None,
        None,
    ),
    Transaction(
        None,
        "Kabobi lunch at Crabtree",
        18,
        False,
        datetime.strptime("2023:12:15 12:23:44", receipt_date_format),
        None,
        "IMG_5937.png",
        35.840650000000004,
        -78.68097777777778,
        None,
        None,
    ),
    Transaction(
        None,
        None,
        10,
        False,
        datetime.strptime("2023:12:19 17:25:50", receipt_date_format),
        None,
        "IMG_5945.png",
        35.89314722222222,
        -78.62704444444444,
        None,
        None,
    ),
    Transaction(
        None,
        None,
        15,
        False,
        datetime.strptime("2023:12:25 13:14:52", receipt_date_format),
        None,
        "IMG_5946.png",
        35.90484722222222,
        -78.60186666666667,
        None,
        None,
    ),
    Transaction(
        None,
        "Bojangles dinner with Sara while family is in Florida",
        16,
        False,
        datetime.strptime("2023:12:26 17:32:04", receipt_date_format),
        None,
        "IMG_5949.png",
        35.905741666666664,
        -78.59140833333333,
        None,
        None,
    ),
    Transaction(
        None,
        "Jimmy Johns with Sara whole family is in Florida",
        19,
        False,
        datetime.strptime("2023:12:27 18:18:18", receipt_date_format),
        None,
        "IMG_5952.png",
        35.918055555555554,
        -78.96121111111111,
        None,
        None,
    ),
    Transaction(
        None,
        "Cookout milkshake with the friend group",
        None,
        False,
        datetime.strptime("2023:12:27 20:54:00", receipt_date_format),
        None,
        "IMG_5953.png",
        35.966769444444445,
        -78.95473611111112,
        None,
        None,
    ),
    Transaction(
        None,
        "Papa Johns with Sara while family is in Florida",
        20,
        False,
        datetime.strptime("2023:12:28 18:15:25", receipt_date_format),
        None,
        "IMG_5954.png",
        35.90139722222222,
        -78.65616666666668,
        None,
        None,
    ),
    Transaction(
        None,
        "Dinner for Sara and I at Penn Station",
        1,
        False,
        datetime.strptime("2024:01:24 19:11:38", receipt_date_format),
        None,
        "IMG_5992.png",
        35.86834722222222,
        -78.62150555555554,
        None,
        None,
    ),
    Transaction(
        None,
        "Groceries with Sara",
        10,
        False,
        datetime.strptime("2024:02:07 19:26:43", receipt_date_format),
        None,
        "IMG_6005.png",
        35.89313611111111,
        -78.62703611111111,
        None,
        None,
    ),
    Transaction(
        None,
        "Cookout Milkshake with Landon and Damion",
        13,
        False,
        datetime.strptime("2024:02:24 00:05:02", receipt_date_format),
        None,
        "IMG_6025.png",
        35.78478333333333,
        -78.69306944444445,
        None,
        None,
    ),
    Transaction(
        None,
        "Birthday card for Sara",
        21,
        False,
        datetime.strptime("2024:02:26 15:08:24", receipt_date_format),
        None,
        "IMG_6037.png",
        35.78813888888889,
        -78.66869444444445,
        None,
        None,
    ),
    Transaction(
        None,
        "Pen from Wolfpack outfitters",
        14,
        False,
        datetime.strptime("2024:02:26 15:19:30", receipt_date_format),
        None,
        "IMG_6038.png",
        35.78346666666666,
        -78.67082222222223,
        None,
        None,
    ),
    Transaction(
        None,
        None,
        10,
        False,
        datetime.strptime("2024:03:12 13:29:32", receipt_date_format),
        None,
        "IMG_6072.png",
        36.53343611111111,
        -77.93872777777779,
        None,
        None,
    ),
    Transaction(
        None,
        None,
        10,
        False,
        datetime.strptime("2024:03:12 13:30:05", receipt_date_format),
        None,
        "IMG_6073.png",
        36.53328611111111,
        -77.93854444444445,
        None,
        None,
    ),
    Transaction(
        None,
        "Dinner with the group after the spring break lake trip",
        None,
        False,
        datetime.strptime("2024:03:13 21:02:24", receipt_date_format),
        None,
        "IMG_6075.png",
        36.096775,
        -78.29701944444444,
        None,
        None,
    ),
    Transaction(
        None,
        "Milkshake at sheets after spring break lake trip",
        None,
        False,
        datetime.strptime("2024:03:13 21:25:17", receipt_date_format),
        None,
        "IMG_6076.png",
        36.09679166666667,
        -78.29698055555555,
        None,
        None,
    ),
    Transaction(
        None,
        "Mtg cards",
        14,
        False,
        datetime.strptime("2024:03:26 17:58:30", receipt_date_format),
        None,
        "IMG_6099.png",
        35.78344722222222,
        -78.67083611111111,
        None,
        None,
    ),
    Transaction(
        None,
        "Mtg cards for Kaalia",
        14,
        False,
        datetime.strptime("2024:04:08 15:40:43", receipt_date_format),
        None,
        "IMG_6125.png",
        35.78339722222222,
        -78.670775,
        None,
        None,
    ),
    Transaction(
        None,
        "Mtg Cards",
        14,
        False,
        datetime.strptime("2024:04:15 17:55:22", receipt_date_format),
        None,
        "IMG_6132.png",
        35.783455555555555,
        -78.67080555555556,
        None,
        None,
    ),
    Transaction(
        None,
        "Mtg card subs",
        14,
        False,
        datetime.strptime("2024:04:19 16:59:39", receipt_date_format),
        None,
        "IMG_6135.png",
        35.78350555555556,
        -78.67083611111111,
        None,
        None,
    ),
    Transaction(
        None,
        "Sub lunch for myself, paid for by parents",
        1,
        False,
        datetime.strptime("2024:05:06 14:36:18", receipt_date_format),
        None,
        "IMG_6158.png",
        35.868430555555555,
        -78.62154444444444,
        None,
        None,
    ),
    Transaction(
        None,
        None,
        23,
        False,
        datetime.strptime("2024:05:11 22:21:59", receipt_date_format),
        None,
        "IMG_6169.png",
        35.90679166666666,
        -78.58938611111111,
        None,
        None,
    ),
    Transaction(
        None,
        "Coffee Beans for Espresso Machine",
        None,
        False,
        datetime.strptime("2024:05:13 13:52:40", receipt_date_format),
        None,
        "IMG_6173.png",
        35.89851111111111,
        -78.65226666666668,
        None,
        None,
    ),
    Transaction(
        None,
        "Coffee on the way to concert",
        None,
        False,
        datetime.strptime("2024:05:14 16:49:02", receipt_date_format),
        None,
        "IMG_6174.png",
        36.07031944444445,
        -79.49975555555555,
        None,
        None,
    ),
    Transaction(
        None,
        "Coffee grounds for mamis birthday",
        10,
        False,
        datetime.strptime("2024:05:16 15:30:55", receipt_date_format),
        None,
        "IMG_6191.png",
        35.893166666666666,
        -78.62702222222221,
        None,
        None,
    ),
    Transaction(
        None,
        "Dinner with Highschool friends, $9.66 because of $1 tip. Paid for by parents.",
        25,
        False,
        datetime.strptime("2024:05:20 21:20:04", receipt_date_format),
        None,
        "IMG_6193.png",
        35.893769444444445,
        -78.62445833333332,
        None,
        None,
    ),
    Transaction(
        None,
        "Lunch at Bojangles paid for by parents with",
        None,
        False,
        datetime.strptime("2024:05:21 12:56:36", receipt_date_format),
        None,
        "IMG_6194.png",
        35.90991944444444,
        -78.47836944444444,
        None,
        None,
    ),
    Transaction(
        None,
        "Coffee beans",
        None,
        False,
        datetime.strptime("2024:05:24 16:27:34", receipt_date_format),
        None,
        "IMG_6209.png",
        36.00396388888889,
        -78.90103888888889,
        None,
        None,
    ),
    Transaction(
        None,
        None,
        12,
        False,
        datetime.strptime("2024:05:27 13:48:26", receipt_date_format),
        None,
        "IMG_6210.png",
        35.87284722222222,
        -78.62338888888888,
        None,
        None,
    ),
    Transaction(
        None,
        "Groceries for dock lake work",
        10,
        False,
        datetime.strptime("2024:05:30 12:41:51", receipt_date_format),
        None,
        "IMG_6212.png",
        36.533480555555556,
        -77.938775,
        None,
        None,
    ),
    Transaction(
        None,
        "Lunch on the way back from dock work",
        None,
        False,
        datetime.strptime("2024:06:02 15:12:38", receipt_date_format),
        None,
        "IMG_6215.png",
        35.909725,
        -78.47825555555556,
        None,
        None,
    ),
    Transaction(
        None,
        "Milk",
        10,
        False,
        datetime.strptime("2024:06:14 09:47:07", receipt_date_format),
        None,
        "IMG_6229.png",
        35.89317222222222,
        -78.62679999999999,
        None,
        None,
    ),
    Transaction(
        None,
        "Dinner for Sara and I paid for by parents",
        16,
        False,
        datetime.strptime("2024:06:14 18:12:07", receipt_date_format),
        None,
        "IMG_6230.png",
        35.90585,
        -78.59125555555555,
        None,
        None,
    ),
    Transaction(
        None,
        "Bojangles dinner for Monica paid for by parents.",
        None,
        False,
        datetime.strptime("2024:06:14 22:07:12", receipt_date_format),
        None,
        "IMG_6237.png",
        35.97686388888889,
        -78.54046666666666,
        None,
        None,
    ),
    Transaction(
        None,
        "Lunch at work",
        26,
        False,
        datetime.strptime("2024:06:17 12:45:20", receipt_date_format),
        None,
        "IMG_6239.png",
        35.87544722222222,
        -78.85151666666665,
        None,
        None,
    ),
    Transaction(
        None,
        "Dinner while parents are on date, paid for by parents",
        16,
        False,
        datetime.strptime("2024:06:19 18:29:51", receipt_date_format),
        None,
        "IMG_6241.png",
        35.905924999999996,
        -78.59135555555555,
        None,
        None,
    ),
    Transaction(
        None,
        "Date dinner with Sara",
        16,
        False,
        datetime.strptime("2024:06:22 20:14:35", receipt_date_format),
        None,
        "IMG_6246.png",
        35.90574722222222,
        -78.59113333333333,
        None,
        None,
    ),
    Transaction(
        None,
        "Quiznos dinner with family paid for by parents",
        12,
        False,
        datetime.strptime("2024:06:24 18:59:59", receipt_date_format),
        None,
        "IMG_6249.png",
        35.87275,
        -78.62350555555555,
        None,
        None,
    ),
    Transaction(
        None,
        "Salad for dinner paid for by parents",
        10,
        False,
        datetime.strptime("2024:06:26 17:08:59", receipt_date_format),
        None,
        "IMG_6252.png",
        35.892916666666665,
        -78.62727222222222,
        None,
        None,
    ),
    Transaction(
        None,
        "Lunch at work",
        16,
        False,
        datetime.strptime("2024:07:02 12:46:24", receipt_date_format),
        None,
        "IMG_6336.png",
        35.878147222222225,
        -78.85025833333333,
        None,
        None,
    ),
    Transaction(
        None,
        "Bowling for work",
        None,
        False,
        datetime.strptime("2024:07:03 17:24:05", receipt_date_format),
        None,
        "IMG_6339.png",
        35.78233611111111,
        -78.79670833333333,
        None,
        None,
    ),
    Transaction(
        None,
        "Quiznos dinner paid for by parents",
        12,
        False,
        datetime.strptime("2024:07:05 19:40:23", receipt_date_format),
        None,
        "IMG_6340.png",
        35.872733333333336,
        -78.62366388888888,
        None,
        None,
    ),
    Transaction(
        None,
        "Lake Gaston pizza for the family paid for by parents",
        27,
        False,
        datetime.strptime("2024:07:06 16:56:57", receipt_date_format),
        None,
        "IMG_6342.png",
        36.53383611111111,
        -77.93856111111111,
        None,
        None,
    ),
    Transaction(
        None,
        "Groceries at lake for family paid for by parents",
        10,
        False,
        datetime.strptime("2024:07:06 17:03:06", receipt_date_format),
        None,
        "IMG_6343.png",
        36.53348888888889,
        -77.93878055555555,
        None,
        None,
    ),
    Transaction(
        None,
        "Groceries for dinner paid for by parents",
        10,
        False,
        datetime.strptime("2024:07:09 18:32:28", receipt_date_format),
        None,
        "IMG_6345.png",
        35.89319166666667,
        -78.62705277777778,
        None,
        None,
    ),
    Transaction(
        None,
        None,
        23,
        False,
        datetime.strptime("2024:07:11 19:00:19", receipt_date_format),
        None,
        "IMG_6348.png",
        35.90689444444444,
        -78.58909722222222,
        None,
        None,
    ),
    Transaction(
        None,
        "Lunch with Sara on the way to pick up pallets",
        None,
        False,
        datetime.strptime("2024:07:14 15:13:30", receipt_date_format),
        None,
        "IMG_6349.png",
        35.97787777777778,
        -77.97467777777779,
        None,
        None,
    ),
    Transaction(
        None,
        "Pizza while parents are out paid for by parents",
        20,
        False,
        datetime.strptime("2024:07:14 19:34:34", receipt_date_format),
        None,
        "IMG_6350.png",
        35.90128611111111,
        -78.65619722222223,
        None,
        None,
    ),
]


class Sample1TestCase(TestCase):
    """
    Base class for all unit tests relating to sample_database_1.db
    """

    def setUp(self):
        """
        Copy sample database file and connect to it.
        """
        shutil.copyfile(sample_database_1_path, test_database_path)
        database.connect(test_database_path)
        model.app_settings.settings = UserSettings.DEFAULT_SETTINGS.copy()

    def tearDown(self):
        """
        Close database and delete test file.
        """
        database.close()
        os.remove(test_database_path)

    # pylint: disable=invalid-name
    def assertSqlEqual(self, expected: SqlObject, actual: SqlObject) -> None:
        """
        Asserts that two SqlObjects are equal and their IDs match.

        :param expected: Expected SqlObject
        :param actual: Actual SqlObjet
        :return: True if the two SqlObjects are equal and their IDs are equal, false if otherwise
        """
        self.assertEqual(expected.sqlid, actual.sqlid)
        self.assertEqual(expected, actual)

    # pylint: disable=invalid-name
    def assertSqlListEqual(
        self,
        expected_list: list[SqlObject],
        actual_list: list[SqlObject],
        strict_order: bool = True,
    ) -> None:
        """
        Asserts that two lists of SqlObjects are equal and their IDs match.
        To use non strict_order each SqlObject must have a sqlid set.

        :param expected_list: Expected list of SqlObject
        :param actual_list: Actual list of SqlObject
        :param strict_order: True if the order of the lists must be the same, false if they can
        be different
        """
        self.assertEqual(len(expected_list), len(actual_list))

        # Ensure order
        if strict_order:
            for expected, actual in zip(expected_list, actual_list):
                self.assertSqlEqual(expected, actual)

        # Sort objects by their sqlid then call this function with strict_order=True
        else:
            sorted_expected_list: list[SqlObject] = expected_list.copy()
            sorted_actual_list: list[SqlObject] = actual_list.copy()

            sorted_expected_list.sort(key=lambda x: x.sqlid)  # type: ignore
            sorted_actual_list.sort(key=lambda x: x.sqlid)  # type: ignore

            self.assertSqlListEqual(
                sorted_expected_list, sorted_actual_list, strict_order=True
            )
